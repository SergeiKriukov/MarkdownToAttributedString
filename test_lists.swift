import MarkdownToAttributedString

// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤
let testMarkdown = """
# –¢–µ—Å—Ç —Å–ø–∏—Å–∫–æ–≤

## –ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
- –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞
- –í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞
- –¢—Ä–µ—Ç–∏–π –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞

## –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
1. –ü–µ—Ä–≤—ã–π –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
2. –í—Ç–æ—Ä–æ–π –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
3. –¢—Ä–µ—Ç–∏–π –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç

## –°–º–µ—à–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
–≠—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å **–∂–∏—Ä–Ω—ã–º** –∏ *–∫—É—Ä—Å–∏–≤–æ–º*.
"""

print("üìù –ò—Å—Ö–æ–¥–Ω—ã–π Markdown:")
print(testMarkdown)
print("\n" + String(repeating: "=", count: 60))

let converter = MarkdownToAttributedString()
let result = converter.convert(testMarkdown)

print("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
print("üìä –î–ª–∏–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: \(result.length)")

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–∫–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
let fullText = result.string
print("\nüìã –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
print(fullText)

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –≤ –º–µ—Å—Ç–∞—Ö —Å–ø–∏—Å–∫–æ–≤
if let bulletRange = fullText.range(of: "‚Ä¢ –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞") {
    let nsRange = NSRange(bulletRange, in: fullText)
    let bulletAttrs = result.attributes(at: nsRange.location, effectiveRange: nil)
    print("\nüéØ –ê—Ç—Ä–∏–±—É—Ç—ã –º–∞—Ä–∫–µ—Ä–∞ —Å–ø–∏—Å–∫–∞: \(bulletAttrs)")
}

if let numberRange = fullText.range(of: "1. –ü–µ—Ä–≤—ã–π –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç") {
    let nsRange = NSRange(numberRange, in: fullText)
    let numberAttrs = result.attributes(at: nsRange.location, effectiveRange: nil)
    print("\nüî¢ –ê—Ç—Ä–∏–±—É—Ç—ã –Ω–æ–º–µ—Ä–∞ —Å–ø–∏—Å–∫–∞: \(numberAttrs)")
}
