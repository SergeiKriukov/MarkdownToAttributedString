import Foundation
#if canImport(UIKit)
import UIKit
#endif
#if canImport(AppKit)
import AppKit
#endif

/// –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä Markdown —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ NSAttributedString
class AttributedStringConverter {

    private let configuration: MarkdownConfiguration

    public init(configuration: MarkdownConfiguration = .init()) {
        self.configuration = configuration
    }

    // MARK: - Helper Methods for Font Creation

    private func fontAttributes(for style: MarkdownStyle) -> [NSAttributedString.Key: Any] {
        var attributes: [NSAttributedString.Key: Any] = [:]

        // –°–æ–∑–¥–∞–µ–º —à—Ä–∏—Ñ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∏–ª—è
        #if canImport(UIKit)
            // iOS, tvOS, watchOS
            var font: UIFont

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—Å —à—Ä–∏—Ñ—Ç–∞
            let weight: UIFont.Weight
            switch style.fontWeight {
            case .regular:
                weight = .regular
            case .bold:
                weight = .bold
            case .semibold:
                weight = .semibold
            case .light:
                weight = .light
            }

            font = UIFont.systemFont(ofSize: style.fontSize, weight: weight)

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—É—Ä—Å–∏–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if style.isItalic {
                if let descriptor = font.fontDescriptor.withSymbolicTraits(.traitItalic) {
                    font = UIFont(descriptor: descriptor, size: style.fontSize)
                }
            }

            attributes[.font] = font
        #elseif canImport(AppKit)
            // macOS
            var font: NSFont

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—Å —à—Ä–∏—Ñ—Ç–∞
            switch style.fontWeight {
            case .regular:
                font = NSFont.systemFont(ofSize: style.fontSize)
            case .bold:
                font = NSFont.boldSystemFont(ofSize: style.fontSize)
            case .semibold:
                font = NSFont.systemFont(ofSize: style.fontSize, weight: .semibold)
            case .light:
                font = NSFont.systemFont(ofSize: style.fontSize, weight: .light)
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—É—Ä—Å–∏–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if style.isItalic {
                let italicFont = NSFontManager.shared.convert(font, toHaveTrait: .italicFontMask)
                font = italicFont
            }

            attributes[.font] = font
        #endif

        return attributes
    }

    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ Markdown —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ NSAttributedString
    public func convert(_ elements: [MarkdownElement]) -> NSAttributedString {
        let result = NSMutableAttributedString()

        for element in elements {
            let attributedString = createAttributedString(for: element)
            result.append(attributedString)
        }

        return result
    }

    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Markdown —Å—Ç—Ä–æ–∫—É –≤ NSAttributedString
    public func convert(_ markdown: String) -> NSAttributedString {
        let parser = MarkdownParser()
        let elements = parser.parse(markdown)
        return convert(elements)
    }

    // MARK: - Private Methods

    private func createAttributedString(for element: MarkdownElement) -> NSAttributedString {
        let content = element.content
        var attributes: [NSAttributedString.Key: Any] = [:]

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
        switch element.type {
        case .text:
            attributes = fontAttributes(for: configuration.text)

        case .header(let level):
            switch level {
            case 1: attributes = fontAttributes(for: configuration.h1)
            case 2: attributes = fontAttributes(for: configuration.h2)
            case 3: attributes = fontAttributes(for: configuration.h3)
            case 4: attributes = fontAttributes(for: configuration.h4)
            case 5: attributes = fontAttributes(for: configuration.h5)
            case 6: attributes = fontAttributes(for: configuration.h6)
            default: attributes = fontAttributes(for: configuration.h1)
            }

        case .bold:
            attributes = fontAttributes(for: configuration.bold)

        case .italic:
            attributes = fontAttributes(for: configuration.italic)

        case .code:
            attributes = fontAttributes(for: configuration.code)

        case .codeBlock:
            attributes = fontAttributes(for: configuration.codeBlock)

        case .link(let title, let url):
            attributes = fontAttributes(for: configuration.link)
            // –î–ª—è —Å—Å—ã–ª–æ–∫ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å underline
            #if canImport(UIKit)
                attributes[.underlineStyle] = NSUnderlineStyle.single.rawValue
            #elseif canImport(AppKit)
                attributes[.underlineStyle] = NSUnderlineStyle.single.rawValue
            #endif

        case .image(let title, let url):
            // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            attributes = fontAttributes(for: configuration.text)
            return NSAttributedString(string: "üñºÔ∏è \(title)", attributes: attributes)

        case .unorderedList(let inlineElements):
            // –°–æ–∑–¥–∞–µ–º attributed string —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            let prefix = "‚Ä¢ "
            let prefixAttributes = fontAttributes(for: configuration.listPrefix)

            let result = NSMutableAttributedString()
            result.append(NSAttributedString(string: prefix, attributes: prefixAttributes))

            // –î–æ–±–∞–≤–ª—è–µ–º inline —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            for element in inlineElements {
                result.append(createAttributedString(for: element))
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞
            result.append(NSAttributedString(string: "\n"))
            return result

        case .orderedList(let number, let inlineElements):
            // –°–æ–∑–¥–∞–µ–º attributed string —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            let prefix = "\(number). "
            let prefixAttributes = fontAttributes(for: configuration.listPrefix)

            let result = NSMutableAttributedString()
            result.append(NSAttributedString(string: prefix, attributes: prefixAttributes))

            // –î–æ–±–∞–≤–ª—è–µ–º inline —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            for element in inlineElements {
                result.append(createAttributedString(for: element))
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞
            result.append(NSAttributedString(string: "\n"))
            return result

        case .lineBreak:
            return NSAttributedString(string: "\n")

        case .paragraph:
            attributes = fontAttributes(for: configuration.text)

        case .table:
            // –¢–∞–±–ª–∏—Ü—ã –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            attributes = fontAttributes(for: configuration.text)
        }

        return NSAttributedString(string: content, attributes: attributes)
    }
}
