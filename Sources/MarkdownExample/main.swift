import Foundation
import MarkdownToAttributedString

print("üöÄ MarkdownToAttributedString - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã")
print(String(repeating: "=", count: 60))

let sampleMarkdown = """
# –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MarkdownToAttributedString

–≠—Ç–æ **–±–∏–±–ª–∏–æ—Ç–µ–∫–∞** –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ *Markdown* —Ç–µ–∫—Å—Ç–∞ –≤ `NSAttributedString`.

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

### –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
- **–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**
- *–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç*
- `–ò–Ω–ª–∞–π–Ω–æ–≤—ã–π –∫–æ–¥`

### –°–ø–∏—Å–∫–∏
- –ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
- –ï—â–µ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç

1. –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
2. –í—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç

### –°—Å—ã–ª–∫–∏
–ü–æ—Å–µ—Ç–∏—Ç–µ [GitHub](https://github.com) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–¥–∞.

### –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
![–õ–æ–≥–æ—Ç–∏–ø Swift](https://swift.org/assets/images/swift.svg)
"""

print("üìù –ò—Å—Ö–æ–¥–Ω—ã–π Markdown:")
print(sampleMarkdown)
print("\n" + String(repeating: "=", count: 60))

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
print("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:")
let converter = MarkdownToAttributedString()
let attributedString = converter.convert(sampleMarkdown)

print("‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ!")
print("üìä –î–ª–∏–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: \(attributedString.length) —Å–∏–º–≤–æ–ª–æ–≤")
print()

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
print("üîç –†–∞–∑–±–æ—Ä –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã:")
let parser = MarkdownParser()
let elements = parser.parse(sampleMarkdown)

print("üìã –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: \(elements.count)")
for (index, element) in elements.prefix(10).enumerated() { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    let typeDescription: String
    switch element.type {
    case .header(let level):
        typeDescription = "–ó–∞–≥–æ–ª–æ–≤–æ–∫ H\(level)"
    case .bold:
        typeDescription = "–ñ–∏—Ä–Ω—ã–π"
    case .italic:
        typeDescription = "–ö—É—Ä—Å–∏–≤"
    case .code:
        typeDescription = "–ö–æ–¥"
    case .link:
        typeDescription = "–°—Å—ã–ª–∫–∞"
    case .image:
        typeDescription = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    case .unorderedList:
        typeDescription = "–ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫"
    case .orderedList:
        typeDescription = "–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫"
    case .text:
        typeDescription = "–¢–µ–∫—Å—Ç"
    default:
        typeDescription = "\(element.type)"
    }

    let content = element.content.count > 50 ?
        String(element.content.prefix(50)) + "..." :
        element.content

    print("  \(index + 1). \(typeDescription): \"\(content)\"")
}

if elements.count > 10 {
    print("  ... –∏ –µ—â–µ \(elements.count - 10) —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
}

print("\n" + String(repeating: "=", count: 60))

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
print("üé® –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π:")
let customConfig = MarkdownConfiguration(
    h1: .init(fontSize: 32, fontWeight: .bold),
    h2: .init(fontSize: 24, fontWeight: .semibold),
    bold: .init(fontWeight: .bold),
    italic: .init(fontWeight: .regular) // italic –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
)

let customConverter = MarkdownToAttributedString(configuration: customConfig)
let customAttributedString = customConverter.convert("# –¢–µ—Å—Ç\n**–ñ–∏—Ä–Ω—ã–π** —Ç–µ–∫—Å—Ç")

print("‚úÖ –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!")
print("üìä –î–ª–∏–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: \(customAttributedString.length) —Å–∏–º–≤–æ–ª–æ–≤")

print("\n" + String(repeating: "=", count: 60))

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ String
print("üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è String:")
let simpleMarkdown = "# –ü—Ä–∏–≤–µ—Ç\n–≠—Ç–æ *–ø—Ä–æ—Å—Ç–æ* —Ç–µ—Å—Ç"
let extendedResult = simpleMarkdown.toAttributedString()

print("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
print("üìä –î–ª–∏–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: \(extendedResult.length) —Å–∏–º–≤–æ–ª–æ–≤")

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
print("\n" + String(repeating: "=", count: 60))
print("üé® –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π:")

let simpleTest = "# –¢–µ—Å—Ç\n**–ñ–∏—Ä–Ω—ã–π** –∏ *–∫—É—Ä—Å–∏–≤* —Ç–µ–∫—Å—Ç"
let testResult = converter.convert(simpleTest)

print("üìù –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç: \"\(simpleTest)\"")
print("üìä –î–ª–∏–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: \(testResult.length)")

if testResult.length > 0 {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–∞
    let headerAttrs = testResult.attributes(at: 0, effectiveRange: nil)
    print("üéØ –ê—Ç—Ä–∏–±—É—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–∞: \(headerAttrs.count > 0 ? "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç" : "–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")")

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    if let boldRange = testResult.string.range(of: "–ñ–∏—Ä–Ω—ã–π") {
        let nsRange = NSRange(boldRange, in: testResult.string)
        let boldAttrs = testResult.attributes(at: nsRange.location, effectiveRange: nil)
        print("üí™ –ê—Ç—Ä–∏–±—É—Ç—ã –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: \(boldAttrs.count > 0 ? "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç" : "–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")")
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∫—É—Ä—Å–∏–≤–∞
    if let italicRange = testResult.string.range(of: "–∫—É—Ä—Å–∏–≤") {
        let nsRange = NSRange(italicRange, in: testResult.string)
        let italicAttrs = testResult.attributes(at: nsRange.location, effectiveRange: nil)
        print("üé≠ –ê—Ç—Ä–∏–±—É—Ç—ã –∫—É—Ä—Å–∏–≤–∞: \(italicAttrs.count > 0 ? "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç" : "–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")")
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    print("üìã –ö–ª—é—á–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤: \(Array(headerAttrs.keys))")
}

print("\n" + String(repeating: "=", count: 60))
print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
print("üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –≤ —Å–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö!")
