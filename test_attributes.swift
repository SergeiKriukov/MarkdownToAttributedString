import MarkdownToAttributedString

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π
let testMarkdown = "# –ó–∞–≥–æ–ª–æ–≤–æ–∫\n**–ñ–∏—Ä–Ω—ã–π** —Ç–µ–∫—Å—Ç"
let converter = MarkdownToAttributedString()
let result = converter.convert(testMarkdown)

print("üìä –î–ª–∏–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: \(result.length)")

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
if result.length > 0 {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫)
    let headerRange = NSRange(location: 0, length: 1)
    let headerAttrs = result.attributes(at: 0, effectiveRange: nil)
    print("üéØ –ê—Ç—Ä–∏–±—É—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–∞: \(headerAttrs)")

    // –ò—â–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    let searchString = "–ñ–∏—Ä–Ω—ã–π"
    let fullString = result.string
    if let range = fullString.range(of: searchString) {
        let nsRange = NSRange(range, in: fullString)
        let boldAttrs = result.attributes(at: nsRange.location, effectiveRange: nil)
        print("üí™ –ê—Ç—Ä–∏–±—É—Ç—ã –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: \(boldAttrs)")
    }
}

print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
